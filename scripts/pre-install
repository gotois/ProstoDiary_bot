#!/usr/bin/env node
const fs = require('fs');
const inquirer = require('inquirer');
const logger = require('../src/lib/log');
const { convertEnvironmentObjectToString } = require('../src/helpers/environments');
/**
 * @constant
 * @type {string}
 */
const ENV_NAME = '.env';
/**
 * @todo добавить validate и улучшить параметры вопросов
 * @type {object[]}
 */
const questions = [
  // TELEGRAM
  {
    type: 'input',
    name: 'TELEGRAM_TOKEN',
    message: 'telegram token',
  },
  // PGSQL
  {
    type: 'input',
    name: 'PGPASSWORD',
    message: 'PGSQL password',
  },
  {
    type: 'input',
    name: 'PGPORT',
    message: 'PGPORT',
  },
  {
    type: 'input',
    name: 'PGHOST',
    message: 'PGHOST',
  },
  {
    type: 'input',
    name: 'PGUSER',
    message: 'PGUSER',
  },
  {
    type: 'input',
    name: 'PGDATABASE',
    message: 'PGDATABASE',
  },
  // Redis
  {
    type: 'input',
    name: 'REDIS_URL',
    message: 'REDIS_URL',
  },
  // Coralogix
  {
    type: 'input',
    name: 'CORALOGIX_WINSTON_PRIVATE_KEY',
    message: 'CORALOGIX_WINSTON_PRIVATE_KEY',
  },
  {
    type: 'input',
    name: 'CORALOGIX_WINSTON_APPLICATION_NAME',
    message: 'CORALOGIX_WINSTON_APPLICATION_NAME',
  },
  // Google
  {
    type: 'input',
    name: 'GOOGLE_MAPS_GEOCODING_API',
    message: 'GOOGLE_MAPS_GEOCODING_API',
  },
  {
    type: 'input',
    name: 'GOOGLE_APPLICATION_CREDENTIALS',
    message: 'GOOGLE_APPLICATION_CREDENTIALS',
  },
  {
    type: 'input',
    name: 'GOOGLE_KNOWLEDGE_GRAPH',
    message: 'GOOGLE_KNOWLEDGE_GRAPH',
  },
  // Dialogflow
  {
    type: 'input',
    name: 'DIALOGFLOW_CREDENTIALS',
    message: 'DIALOGFLOW_CREDENTIALS',
  },
  {
    type: 'input',
    name: 'DIALOGFLOW_CREDENTIALS_SEARCH',
    message: 'DIALOGFLOW_CREDENTIALS_SEARCH',
  },
  // nalog.ru
  {
    type: 'input',
    name: 'NALOGRU_EMAIL',
    message: 'NALOGRU_EMAIL',
  },
  {
    type: 'input',
    name: 'NALOGRU_NAME',
    message: 'NALOGRU_NAME',
  },
  {
    type: 'input',
    name: 'NALOGRU_PHONE',
    message: 'NALOGRU_PHONE',
  },
  {
    type: 'input',
    name: 'NALOGRU_KP_PASSWORD',
    message: 'NALOGRU_KP_PASSWORD',
  },
  // SENDGRID
  {
    type: 'input',
    name: 'SENDGRID_API_KEY',
    message: 'SENDGRID_API_KEY',
  },
  {
    type: 'input',
    name: 'SENDGRID_API_KEY_DEV',
    message: 'SENDGRID_API_KEY_DEV',
  },
  // OPEN WHEATHER
  {
    type: 'input',
    name: 'OPEN_WEATHER_KEY',
    message: 'OPEN_WEATHER_KEY',
  },
  // foursquare
  {
    type: 'input',
    name: 'FOURSQUARE_CLIEND_ID',
    message: 'FOURSQUARE_CLIEND_ID',
  },
  {
    type: 'input',
    name: 'FOURSQUARE_CLIENT_SECRET',
    message: 'FOURSQUARE_CLIENT_SECRET',
  },
  {
    type: 'input',
    name: 'FOURSQUARE_PUSH_SECRET',
    message: 'FOURSQUARE_PUSH_SECRET',
  },
  {
    type: 'input',
    name: 'FOURSQUARE_REDIRECT_URI',
    message: 'FOURSQUARE_REDIRECT_URI',
  },
  {
    type: 'input',
    name: 'FOURSQUARE_ACCESS_TOKEN',
    message: 'FOURSQUARE_ACCESS_TOKEN',
  },
  // NGROK
  {
    type: 'input',
    name: 'NGROK',
    message: 'NGROK',
  },
  // YANDEX
  {
    type: 'input',
    name: 'YA_DICTIONARY',
    message: 'YA_DICTIONARY',
  },
  // getting from https://pddimp.yandex.ru/api2/admin/get_token_result
  {
    type: 'input',
    name: 'YA_PDD_TOKEN',
    message: 'YA_PDD_TOKEN',
  },
  // YA OAUTH
  {
    type: 'input',
    name: 'YA_OAUTH_ID',
    message: 'YA_OAUTH_ID',
  },
  {
    type: 'input',
    name: 'YA_OAUTH_PASSWORD',
    message: 'YA_OAUTH_PASSWORD',
  },
  {
    type: 'input',
    name: 'YA_OAUTH_CALLBACK',
    message: 'YA_OAUTH_CALLBACK',
  },
  // facebook
  {
    type: 'input',
    name: 'FACEBOOK_APP_ID',
    message: 'FACEBOOK_APP_ID',
  },
  {
    type: 'input',
    name: 'FACEBOOK_APP_SECRET',
    message: 'FACEBOOK_APP_SECRET',
  },
  // sentry
  {
    type: 'input',
    name: 'SENTRY_DSN',
    message: 'SENTRY_DSN',
  },
];

(async function main() {
  if (fs.existsSync(ENV_NAME)) {
    throw new Error('File: ' + ENV_NAME + ' exist. Please recycle it');
  }
  const environments = await inquirer.prompt(questions);
  const values = convertEnvironmentObjectToString(environments);
  fs.writeFileSync(ENV_NAME, values);
  logger.info('file: ' + ENV_NAME + ' saved');
})();
