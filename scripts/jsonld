#!/usr/bin/env node
require('dotenv').config();
const jsonld = require('jsonld');
const { pool, sql } = require('../src/core/database');
const passportQueries = require('../src/db/passport');
const botQueries = require('../src/db/bot');
const { mail } = require('../src/services/sendgridmail.service');

// todo использовать свои схемы - "https://gotointeractive.com/#organization",
const yandexLD = async (parameters) => {
  const compacted = await jsonld.compact(
    {
      'http://xmlns.com/foaf/0.1/name': parameters.real_name,
      'http://schema.org/gender': parameters.sex,
      'http://xmlns.com/foaf/0.1/nick': parameters.login,
      'http://xmlns.com/foaf/0.1/mbox': {
        '@id': `mailto://${parameters.default_email}`,
      },
      'http://xmlns.com/foaf/0.1/img': {
        '@id': `https://avatars.mds.yandex.net/get-yapic/${parameters.default_avatar_id}/islands-middle`,
      },
      // fixme неправильно сериализуется
      // 'http://schema.org/birthDate': {
      //   '@id': parameters.birthday,
      // },
    },
    'https://json-ld.org/contexts/person.jsonld',
  );
  return compacted;
};
const facebookLD = async (parameters) => {
  const compacted = await jsonld.compact(
    {
      'http://xmlns.com/foaf/0.1/name': parameters.name,
      // 'http://schema.org/gender': params.gender, // может не быть
      'http://xmlns.com/foaf/0.1/mbox': {
        '@id': `mailto://${parameters.email}`,
      },
      // "http://xmlns.com/foaf/0.1/homepage": {"@id": "http://denis.baskovsky.ru/"},
      // "http://xmlns.com/foaf/0.1/title": "TeamLead",
    },
    'https://json-ld.org/contexts/person.jsonld',
  );
  return compacted;
};
const telegramLD = async (parameters) => {
  const compacted = await jsonld.compact(
    {
      'http://xmlns.com/foaf/0.1/name': parameters.first_name,
    },
    'https://json-ld.org/contexts/person.jsonld',
  );
  return compacted;
};

(async function main() {
  await pool.connect(async (connection) => {
    try {
      // берем данные из паспорта
      const passports = await connection.many(
        passportQueries.getPassports(),
      );
      for (const passport of passports) {
        const botTable = await connection.one(botQueries.selectByPassport(passport.id));
        // уведомляем на почту если oauth сессия устарела на почту
        const currentDate = new Date().getTime() / 1000;
        if (passport.facebook_session && passport.facebook_session.expires_in < currentDate) {
          await mail.send({
            to: passport.facebook_passport.email,
            from: botTable.email,
            subject: 'Oauth facebook session is over, please update',
            html: `
        <a>todo</a>
    `,
          });
        }
        if (passport.yandex_session && passport.yandex_session.expires_in < currentDate) {
          await mail.send({
            to: passport.yandex_passport.email,
            from: botTable.email,
            subject: 'Oauth yandex session is over, please update',
            html: `
        <a>todo</a>
    `,
          });
        }

        // превращаем данные oauth в структуру JSON-LD
        const linkedData = {
          ...(await telegramLD(passport.telegram_passport)),
          ...(await yandexLD(passport.yandex_passport)),
          ...(await facebookLD(passport.facebook_passport)),
        };

        // записываем семантические данные в таблицу JSON-LD
        await connection.query(sql`
INSERT INTO ld (passport_id, jsonld)
    VALUES (${passport.id}, ${JSON.stringify(linkedData)})
        `);
      }
    } catch (error) {
      console.error(error);
      process.exit(1);
    }
  });
  /*
Итогом генерации будет стандартная JSON-LD таблица с описанием со своим таймлайном:

url
logo
sameAs
contactPoint
foundingDate
alternateName
gender
height
jobTitle
birthDate
nationality
birthPlace
worksFor
affiliation
 */

  process.exit(0);
})();
