#!/usr/bin/env node
require('dotenv').config();
const nodemon = require('nodemon');
const ngrok = require('ngrok');
const { spawn } = require('child_process');
const logger = require('../src/services/logger.service');
const { IS_PRODUCTION, SERVER, NGROK } = require('../src/environment');
const clipboardHelper = require('../src/helpers/clipboard');

(async function main() {
  if (IS_PRODUCTION) {
    spawn('node', ['src/server']);
  } else {
    let nodemonInstance;
    await ngrok.authtoken(NGROK.TOKEN);
    try {
      const url = await ngrok.connect({
        addr: SERVER.PORT,
        proto: 'http',
        // region: 'eu', // uncomment if needs
        onStatusChange(status) {
          logger.info(status);
        },
        onLogEvent(data) {
          logger.info(data);
        },
      });
      nodemonInstance = nodemon(`-x 'NGROK_URL=${url} node' src/server`);
      // fixme uncomment
      // const { updateWebhook } = require('../src/services/sendgridmail.service');
      // await sendgridService.updateWebhook(url)
      clipboardHelper.copy(url);
      // copy ngrok url to buffer
    } catch (error) {
      logger.error(error.msg);
      logger.warn(`"Run without NGROK. Telegram webhook doesn't work!"`);
      nodemonInstance = nodemon({ script: 'src/server' });
    }
    nodemonInstance
      .on('start', () => {
        logger.log('info', 'Nodemon has started');
      })
      .on('quit', () => {
        logger.log('info', 'App has quit');
        process.exit(0);
      })
      .on('restart', (files) => {
        logger.log('info', 'App restarted due to: ' + files);
      });
  }
})();
