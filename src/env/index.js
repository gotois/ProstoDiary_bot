const {
  HOST,
  DATABASE,
  DB_USER,
  DBPORT,
  PASSWORD,
  CORALOGIX_WINSTON_PRIVATE_KEY,
  CORALOGIX_WINSTON_APPLICATION_NAME,
  GOOGLE_APPLICATION_CREDENTIALS,
  TOKEN,
  PORT,
  HEROKU_NAME,
  DIALOGFLOW_CREDENTIALS,
  DIALOGFLOW_PROJECT_ID,
  GOOGLE_MAPS_GEOCODING_API,
  PLOTLY_LOGIN,
  PLOTLY_TOKEN,
  SALT_PASSWORD,
  NALOGRU_EMAIL,
  NALOGRU_NAME,
  NALOGRU_PHONE,
  NALOGRU_KP_PASSWORD,
  FAT_SECRET_APPNAME,
  FAT_SECRET_API_ACCESS_KEY,
  FAT_SECRET_API_SHARED_SECRET,
} = process.env;

module.exports = {
  host: HOST,
  database: DATABASE,
  user: DB_USER,
  port: DBPORT,
  password: PASSWORD,

  CORALOGIX_WINSTON_PRIVATE_KEY,
  CORALOGIX_WINSTON_APPLICATION_NAME,
  GOOGLE_APPLICATION_CREDENTIALS,
  TOKEN,
  PORT,
  HEROKU_NAME,
  DIALOGFLOW_CREDENTIALS,
  DIALOGFLOW_PROJECT_ID,
  GOOGLE_MAPS_GEOCODING_API,
  PLOTLY_LOGIN,
  PLOTLY_TOKEN,
  SALT_PASSWORD,

  NALOGRU_EMAIL,
  NALOGRU_NAME,
  NALOGRU_PHONE,
  NALOGRU_KP_PASSWORD,

  FAT_SECRET_APPNAME,
  FAT_SECRET_API_ACCESS_KEY,
  FAT_SECRET_API_SHARED_SECRET,

  get GOOGLE_CREDENTIALS_PARSED() {
    if (!GOOGLE_APPLICATION_CREDENTIALS) {
      throw new Error('GOOGLE_APPLICATION_CREDENTIALS is not initialized');
    }
    return JSON.parse(GOOGLE_APPLICATION_CREDENTIALS);
  },

  get DIALOGFLOW_CREDENTIALS_PARSED() {
    if (!DIALOGFLOW_CREDENTIALS) {
      throw new Error('DIALOGFLOW_CREDENTIALS is not initialized');
    }
    return JSON.parse(DIALOGFLOW_CREDENTIALS);
  },

  get IS_PRODUCTION() {
    return String(process.env.NODE_ENV) === 'production';
  },
};
