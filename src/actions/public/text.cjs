const Dialog = require('../../libs/dialog.cjs');
const { sendPrepareAction } = require('../../libs/tg-prepare-action.cjs');
const { generateCalendar } = require('../../controllers/generate-calendar.cjs');

async function privateDialog(dialog) {
  const [{ queryResult }] = await dialog.text(dialog.message.text);
  dialog.message.from.language_code = queryResult.languageCode;
  switch (queryResult.intent.displayName) {
    case 'OrganizeAction': {
      break;
    }
    default: {
      throw new Error(queryResult.fulfillmentText || '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á—Ç–æ-—Ç–æ –¥—Ä—É–≥–æ–µ');
    }
  }
  if (!queryResult.intent.endInteraction) {
    // todo - –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤, —Ç–æ –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –¥–∏–∞–ª–æ–≥
    //  ...
  }
}

async function groupDialog(dialog, bot) {
  const [{ queryResult }] = await dialog.text(dialog.message.text);
  dialog.message.from.language_code = queryResult.languageCode;
  switch (queryResult.intent.displayName) {
    case 'OrganizeAction': {
      await bot.sendMessage(dialog.message.chat.id, queryResult.fulfillmentText, {
        reply_to_message_id: dialog.message.message_id,
        disable_notification: false,
        disable_web_page_preview: true,
        reply_markup: {
          force_reply: true,
          inline_keyboard: [
            [
              {
                text: '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å',
                callback_data: 'approve_event',
              },
            ],
          ],
        },
      });
      break;
    }
    default: {
      break;
    }
  }
}

module.exports = async (bot, message) => {
  const dialog = new Dialog(message);
  const accept = 'text/calendar';

  if (message.chat.type === 'group') {
    // FIXME - –¥–ª—è –≥—Ä—É–ø–ø—ã:
    //  —Å–ª–µ–¥–∏–º –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è OrganizeAction –æ—Ç –æ–¥–Ω–æ–≥–æ –∏–∑ —É—á–∞—Å—Ç–Ω–∏–∫–∞
    //  —Å–ª—É—à–∞–µ–º —á–∞—Ç –¥–æ —Ç–µ—Ö –ø–æ—Ä, –ø–æ–∫–∞ –Ω–µ –ø–æ—è–≤–∏—Ç—Å—è –æ—Ç –¥—Ä—É–≥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–ª–∏ –æ–ø—Ä–æ–≤–µ—Ä–∂–µ–Ω–∏–µ
    await groupDialog(dialog, bot);
  } else {
    bot.sendChatAction(dialog.message.chat.id, sendPrepareAction(accept));

    try {
      await privateDialog(dialog);
      await generateCalendar(bot, dialog);
    } catch (error) {
      console.error('DialogflowError:', error);
      await bot.setMessageReaction(dialog.message.chat.id, dialog.message.message_id, {
        reaction: JSON.stringify([
          {
            type: 'emoji',
            emoji: 'ü§∑‚Äç‚ôÄ',
          },
        ]),
      });
      return bot.sendMessage(dialog.activity.target.id, error.message, {
        parse_mode: 'markdown',
        disable_web_page_preview: true,
      });
    }
  }
};
