const requestJsonRpc2 = require('request-json-rpc2').default;
const activitystreams = require('telegram-bot-activitystreams');
const { v1: uuidv1 } = require('uuid');
const ICAL = require('ical.js');
const { GIC_RPC, GIC_USER, GIC_PASSWORD } = process.env;

/**
 * @param {string} ical
 * @returns {string}
 */
function formatCalendarMessage(ical) {
  const jcalData = ICAL.parse(ical);
  const comp = new ICAL.Component(jcalData);
  const vevent = comp.getFirstSubcomponent('vevent');

  const eventName = vevent.getFirstPropertyValue('summary');
  let output = '';
  output += '**–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:**\n';
  if (eventName) {
    output += eventName + '\n\n';
  }
  const dtStart = vevent.getFirstPropertyValue('dtstart');
  if (dtStart) {
    // –ó–∞–≤—Ç—Ä–∞
    const date = `(${new Intl.DateTimeFormat('ru').format(new Date(dtStart.toString()))})`;
    output += `üìÖ **–î–∞—Ç–∞:** ${date}\n`;
  }
  if (dtStart.hour !== 0 && dtStart.minute !== 0) {
    output += `üïê **–í—Ä–µ–º—è:** ${dtStart.hour}:${dtStart.minute}\n`;
  }
  const location = vevent.getFirstPropertyValue('location');
  if (location) {
    output += `üè† **–ú–µ—Å—Ç–æ:** ${location}\n`;
  }
  // fixme –±—Ä–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏ –∏–∑ Event ToDo
  output += `üìå –ó–∞–º–µ—Ç–∫–∏: -\n`;
  output += '\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!\n';
  output += '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.';

  return output.trim();
}

module.exports = async (bot, message) => {
  const activity = activitystreams(message);
  const me = await bot.getMe();
  activity.origin.name = me.first_name;
  activity.origin.url = 'https://t.me/' + me.username;
  const id = uuidv1();
  await bot.sendChatAction(activity.target.id, 'typing');
  const {result} = await requestJsonRpc2({
    url: GIC_RPC,
    body: {
      id: id,
      method: 'generate-calendar',
      params: activity,
    },
    auth: {
      user: GIC_USER,
      pass: GIC_PASSWORD,
    },
    headers: {
      'Accept': 'text/calendar',
      // 'accept-language': message.from.language_code,
    },
  });
  console.log('result', result)
  if (!result) {
    return await bot.sendMessage(activity.target.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –î–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã.', {
      parse_mode: 'markdown',
    });
  }
  await bot.sendMessage(activity.target.id, formatCalendarMessage(result), {
    parse_mode: 'markdown',
  });
  const fileEvent = new File([new TextEncoder().encode(result)], 'calendar.ics', {
    type: 'text/calendar',
  });
  const arrayBuffer = await fileEvent.arrayBuffer();
  await bot.sendChatAction(activity.target.id, 'upload_document');
  await bot.sendDocument(activity.target.id, Buffer.from(arrayBuffer), {
      // caption: result,
      parse_mode: 'markdown',
      disable_notification: true,
    }, {
      filename: fileEvent.name,
      contentType: 'application/octet-stream',
    });
};
