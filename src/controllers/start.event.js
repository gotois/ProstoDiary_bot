const jsonrpc = require('jsonrpc-lite');
const fs = require('fs');
const cryptoRandomString = require('crypto-random-string');
const pkg = require('../../package');
const bot = require('../core/bot');
const sgMail = require('../services/sendgridmail.service');
const dbUsers = require('../database/users.database');
const logger = require('../services/logger.service');
const auth = require('../services/auth.service');
const { PERSON } = require('../environment');
const APIPost = require('../api/v2/post');

class Start {
  /**
   * @param {TelegramMessage} message - message
   */
  constructor(message) {
    this.message = message;
    this.dialog = this.messageIterator();
    this.messageListener = this.messageListener.bind(this);
    bot.on('callback_query', this.messageListener);
  }
  async beginDialog() {
    logger.log('info', Start.name);
    // if (false) { // todo: test
    const { rowCount } = await dbUsers.exist(this.message.from.id);
    if (rowCount > 0) {
      await bot.sendMessage(
        this.message.chat.id,
        '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è',
      );
      return;
    }
    // } // testend
    await this.dialog.next();
  }
  async agreeReplyMessage({ text }) {// eslint-disable-line
    // todo –ø—Ä–æ–≤–µ—Ä—è—Ç—å text, –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ json, –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Ç–∏–ø—ã –∏ –ø—Ä
    //  ...
    this.creator = await PERSON; // –ø–æ–∫–∞ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ–º env

    // todo –¥–æ–±–∞–≤–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–µ–ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–º–æ—â—å—é NumLock', –∞ —Ç–∞–∫–∂–µ —ç–º–æ–¥–∂–∏
    // fixme —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –º–∞—Å—Ç–µ—Ä —Å–æ–ª—å
    // const masterSalt = cryptoRandomString({ length: 10 });

    const script = `INSERT INTO creator (telegramUserId, id, name, email, image, url, sameAs) VALUES (${
      this.message.from.id
    }, '${this.creator['@id']}', '${this.creator.name}', '${
      this.creator.email
    }', '${this.creator.image}', '${this.creator.url}', array${JSON.stringify(
      this.creator.sameAs,
    ).replace(/"/g, '\'')}) ;`; // eslint-disable-line
    const requestObject = jsonrpc.request('123', 'script', {
      buffer: Buffer.from(script),
      date: this.message.date,
      mime: 'application/sql',
      creator: this.creator.email,
      publisher: pkg.author.email,
      telegram_message_id: this.message.message_id,
    });
    const result = await APIPost(requestObject);
    if (result.error) {
      console.error(result.error); // eslint-disable-line
      await bot.sendMessage(
        this.message.chat.id,
        '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–∞ –æ—à–∏–±–∫–∞ —Å–∫—Ä–∏–ø—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞',
      );
      bot.off('callback_query', this.messageListener);
      return;
    }
    this.dialog.next();
  }
  async checkReplyMessage({ text }) {
    if (text !== this.installKey) {
      // todo –¥–æ–¥–µ–ª–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ—Å—Ç–∏ –ø–æ–ø—ã—Ç–æ–∫ - 3 —à—Ç—É–∫–∏ –º–∞–∫—Å
      await bot.sendMessage(this.message.chat.id, '–ù–µ–≤–µ—Ä–Ω—ã–π –∫–ª—é—á');
      return;
    }
    const requestObject = jsonrpc.request('123', 'post', {
      buffer: Buffer.from(
        `–£—Å—Ç–∞–Ω–æ–≤–∫–∞ ${pkg.name} ${this.message.from.language_code} –¥–ª—è ${this.message.from.first_name}`,
      ),
      mime: 'plain/text',
      date: this.message.date,
      creator: pkg.author.email,
      publisher: pkg.author.email,
      telegram_message_id: this.message.message_id,
    });
    const result = await APIPost(requestObject);
    if (result.error) {
      bot.off('callback_query', this.messageListener);
      await bot.sendMessage(
        this.message.chat.id,
        '–í—Ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –æ—à–∏–±–∫–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start',
      );
      return;
    }
    this.dialog.next();
  }
  async messageListener(query) {
    switch (query.data) {
      case 'CHECK': {
        this.installKey = cryptoRandomString({ length: 5, type: 'url-safe' });
        await sgMail.send({
          to: this.creator.email,
          from: pkg.author.email,
          subject: 'ProstoDiary Authüëæ',
          text:
            'Welcome to ProstoDiary. ' +
            '–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ: ' +
            this.installKey,
        });
        const checkMessageValue = await this.dialog.next().value;
        bot.onReplyToMessage(
          this.message.chat.id,
          checkMessageValue.message_id,
          this.checkReplyMessage.bind(this),
        );
        break;
      }
      case 'CANCEL': {
        await bot.sendMessage(this.message.chat.id, 'Please rerun /start');
        bot.off('callback_query', this.messageListener);
        break;
      }
      case 'AGREE': {
        const jsonLDMessageValue = await this.dialog.next().value;
        bot.onReplyToMessage(
          this.message.chat.id,
          jsonLDMessageValue.message_id,
          this.agreeReplyMessage.bind(this),
        );
        break;
      }
      default: {
        break;
      }
    }
  }
  /**
   * @returns {IterableIterator<*|void|PromiseLike<Promise | never>|Promise<Promise | never>|Promise>}
   */
  *messageIterator() {
    // Step 1: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ñ–µ—Ä—Ç—É
    const offerta = fs.readFileSync('docs/_pages/offerta.md').toString();
    yield bot.sendMessage(this.message.chat.id, offerta, {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        inline_keyboard: [
          [
            { text: '–ü—Ä–∏–Ω–∏–º–∞—é', callback_data: 'AGREE' },
            { text: '–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', callback_data: 'CANCEL' },
          ],
        ],
      },
    });
    // Step 2: –ø–æ–ª—É—á–∞—Ç—å JSON-LD, –Ω–∞–ø—Ä–∏–º–µ—Ä - https://me.baskovsky.ru
    yield bot.sendMessage(
      this.message.chat.id,
      '–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –≤–∞—à–µ–≥–æ —Å–∞–π—Ç–∞\n' +
        '*–ù–∞ —Å–∞–π—Ç–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã –¥–∞–Ω–Ω—ã–µ Person JSON-LD*',
      {
        reply_markup: {
          force_reply: true,
        },
      },
    );
    // Step 3: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Auth token
    const secret = auth.genereateGoogleAuth(this.creator.email);
    yield bot.sendMessage(
      this.message.chat.id,
      '**Check your data:**\n\n' +
        `Auth key: ${secret.base32}\n` +
        `Mail: ${this.creator.email}`,
      {
        parse_mode: 'Markdown',
        reply_markup: {
          force_reply: true,
          inline_keyboard: [
            [
              { text: 'OK', callback_data: 'CHECK' },
              { text: 'CANCEL', callback_data: 'CANCEL' },
            ],
          ],
        },
      },
    );
    yield bot.sendMessage(
      this.message.chat.id,
      '–í–≤–µ–¥–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–æ—á—Ç—ã',
      {
        reply_markup: {
          force_reply: true,
        },
      },
    );
    yield bot.sendMessage(
      this.message.chat.id,
      `–ü—Ä–∏–≤–µ—Ç __${this.creator.name}__!\n
      –Ø —Ç–≤–æ–π –±–æ—Ç __${pkg.description}__ ${pkg.version}!\n
      –ù–µ –∑–∞–±—É–¥—å –±—ç–∫–∞–ø–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.`,
      {
        parse_mode: 'Markdown',
      },
    );
  }
}
/**
 * @param {TelegramMessage} message - message
 * @returns {undefined}
 */
const onStart = async (message) => {
  const start = new Start(message);
  await start.beginDialog();
};

module.exports = onStart;
