const fs = require('fs');
const pkg = require('../../package');
const bot = require('../core');
const sgMail = require('../services/sendgridmail.service');
const dbUsers = require('../database/users.database');
const logger = require('../services/logger.service');
const auth = require('../services/auth.service');
const BotStory = require('../models/story/bot-story');
const { PERSON } = require('../environment');
/**
 * @param {number} chatId - chatId
 * @returns {IterableIterator<*|void|PromiseLike<Promise | never>|Promise<Promise | never>|Promise>}
 */
function* messageIterator(chatId) {
  // Step 1: –≤—ã–≤–æ–¥–∏—Ç—å –æ—Ñ–µ—Ä—Ç—É
  const offerta = fs.readFileSync('docs/_pages/offerta.md').toString();
  yield bot.sendMessage(chatId, offerta, {
    parse_mode: 'Markdown',
    reply_markup: {
      force_reply: true,
      inline_keyboard: [
        [{ text: '–ü—Ä–∏–Ω–∏–º–∞—é', callback_data: 'AGREE' }],
        [{ text: '–ù–µ –ø—Ä–∏–Ω–∏–º–∞—é', callback_data: 'CANCEL' }],
      ],
    },
  });
  // Step 2: –ø–æ–ª—É—á–∞—Ç—å —Å–æ–ª—å
  yield bot.sendMessage(
    chatId,
    '–í–≤–µ–¥–∏—Ç–µ —Å–æ–ª—å –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è\n' +
      '*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–µ–ø–µ—á–∞—Ç–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã —Å –ø–æ–º–æ—â—å—é NumLock',
    {
      reply_markup: {
        force_reply: true,
      },
    },
  );
  // Step 3: –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º Auth token
  const secret = auth.genereateGoogleAuth(PERSON.email);
  yield bot.sendMessage(
    chatId,
    `**Check your data:**\n\nAuth key: ${secret.base32}\nMail: ${PERSON.email}`,
    {
      parse_mode: 'Markdown',
      reply_markup: {
        force_reply: true,
        inline_keyboard: [
          [{ text: 'OK', callback_data: 'CHECK' }],
          [{ text: 'CANCEL', callback_data: 'CANCEL' }],
        ],
      },
    },
  );
  yield bot.sendMessage(chatId, '–í–≤–µ–¥–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥ –∏–∑ –ø–æ—á—Ç—ã', {
    reply_markup: {
      force_reply: true,
    },
  });
  yield bot.sendMessage(
    chatId,
    `–ü—Ä–∏–≤–µ—Ç __${PERSON.name}__!\n–Ø —Ç–≤–æ–π –±–æ—Ç __${pkg.description}__ ${pkg.version}!\n–ù–µ –∑–∞–±—É–¥—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω—É—é –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é.`,
    {
      parse_mode: 'Markdown',
    },
  );
}
/**
 * –ü—Ä–∏ –ø–µ—Ä–≤–æ–º –≤–∫–ª—é—á–µ–Ω–∏–∏ —Å–æ–∑–¥–∞–µ–º –≤ –ë–î —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –∫–æ–ª–æ–Ω–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã
 *
 * @param {object} msg - message
 * @param {object} msg.chat - chat
 * @param {object} msg.from - from
 * @returns {undefined}
 */
const onStart = async ({ chat, from, date, message_id }) => {
  logger.log('info', onStart.name);
  const chatId = chat.id;
  const { rowCount } = await dbUsers.exist(from.id);
  // if (false) { // todo: test
  if (rowCount > 0) {
    await bot.sendMessage(chatId, '–ü–æ–≤—Ç–æ—Ä–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è');
    return;
  }
  // }
  // eslint-disable-next-line
  const messageListener = async (query) => {
    const installKey = '123456'; // todo —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞—é—â–∏–π –≤—Ö–æ–¥
    switch (query.data) {
      case 'CHECK': {
        await sgMail.send({
          to: PERSON.email,
          from: 'no-reply@gotointeractive.com',
          subject: 'ProstoDiary Authüëæ',
          text:
            'Welcome to ProstoDiary.\n–î–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–∏—à–ª–∏—Ç–µ –±–æ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–µ' +
            installKey,
        });
        const checkMessageValue = await iterator.next().value;
        bot.onReplyToMessage(
          chatId,
          checkMessageValue.message_id,
          async ({ text }) => {
            if (text !== installKey) {
              // eslint-disable-next-line
              console.log('wrong key');
              return;
            }
            const story = new BotStory(
              Buffer.from(
                `INSTALL ${from.language_code} Bot for ${from.first_name}`,
              ),
              {
                date,
                type: 'CORE',
                intent: 'system',
                telegram_user_id: from.id,
                telegram_message_id: message_id,
              },
            );
            try {
              await story.save();
              iterator.next();
            } catch (error) {
              logger.log('error', error);
              await bot.sendMessage(chatId, '–í—Ö–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è –æ—à–∏–±–∫–æ–π');
            } finally {
              bot.off('callback_query', messageListener);
            }
          },
        );
        break;
      }
      case 'CANCEL': {
        await bot.sendMessage(chatId, 'Please rerun /start');
        bot.off('callback_query', messageListener);
        break;
      }
      case 'AGREE': {
        const cryptoMessageValue = await iterator.next().value;
        bot.onReplyToMessage(
          chatId,
          cryptoMessageValue.message_id,
          // eslint-disable-next-line
          async ({ text }) => {
            // todo: —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î —Å–æ–ª—å –¥–ª—è crypto
            // eslint-disable-next-line
            console.log('your salt', text);
            // secret.base32 // todo: —ç—Ç–æ –Ω—É–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î
            // new Story({
            //   intent: 'system',
            //   type: 'CORE',
            // })
            iterator.next();
          },
        );
        break;
      }
      default: {
        break;
      }
    }
  };
  const iterator = messageIterator(chatId);
  await iterator.next();
  bot.on('callback_query', messageListener);
};

module.exports = onStart;
