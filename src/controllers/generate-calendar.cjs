const ICAL = require('ical.js');
const requestJsonRpc2 = require('request-json-rpc2').default;

const { GIC_RPC } = process.env;

// –§—É–Ω–∫—Ü–∏—è —Å–µ—Ä–∏–∞–ª–∏–∑—É–µ—Ç —Ç–µ–∫—Å—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç MarkdownV2
function serializeMarkdownV2(text) {
  text = text.replaceAll('.', '\\.');
  text = text.replaceAll('-', '\\-');
  return text;
}

/**
 * @param {string} ical - ical string
 * @param {string} [locale] - locale
 * @returns {string}
 */
module.exports.formatCalendarMessage = (ical, locale = 'ru') => {
  const icalData = ICAL.parse(ical);
  const comp = new ICAL.Component(icalData);
  const vevent = comp.getFirstSubcomponent('vevent');
  const eventName = vevent.getFirstPropertyValue('summary');
  let output = '';
  output += '**–°–æ–∑–¥–∞–Ω–æ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ:**\n';
  if (eventName) {
    const category = vevent.getFirstPropertyValue('categories');
    switch (category) {
      case '–¥–µ–Ω—å–≥–∏': {
        output += 'üí∞';
        break;
      }
      case '–¥—Ä—É–∑—å—è': {
        output += 'üë´'
        break;
      }
      case '–∑–¥–æ—Ä–æ–≤—å–µ': {
        output += 'üè•';
        break;
      }
      case '–∫–∞—Ä—å–µ—Ä–∞': {
        output += 'üíº';
        break;
      }
      case '–ª–∏—á–Ω–æ—Å—Ç–Ω—ã–π —Ä–æ—Å—Ç': {
        output += 'üìö';
        break;
      }
      case '–ª—é–±–æ–≤—å':
      case '–æ—Ç–Ω–æ—à–µ–Ω–∏—è':
      case '–ª—é–±–æ–≤—å –∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è': {
        output += '‚ù§Ô∏è';
        break;
      }
      case '–æ—Ç–¥—ã—Ö –∏ —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': {
        output += 'üéâ';
        break;
      }
      case '–ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': {
        output += 'üå¥';
        break;
      }
      case '—É—Å–ª–æ–≤–∏—è –∂–∏–∑–Ω–∏': {
        output += 'üè†';
        break;
      }
    }
    output += eventName + '\n\n';
  }
  const dtStart = vevent.getFirstPropertyValue('dtstart').toString().replace('Z', '');
  if (dtStart) {
    const date = new Date(dtStart);
    const dateString = new Intl.DateTimeFormat(locale).format(date);
    output += `üìÖ **–î–∞—Ç–∞:** ${dateString}\n`;

    if (date.getHours() !== 0) {
      const timeString = new Intl.DateTimeFormat(locale, {
        hour: 'numeric',
        minute: 'numeric',
        hour12: false,
      }).format(date);
      output += `üïê **–í—Ä–µ–º—è:** ${timeString}\n`;
    }
  }
  const location = vevent.getFirstPropertyValue('location');
  if (location) {
    output += `üè† **–ú–µ—Å—Ç–æ:** ${serializeMarkdownV2(location)}\n`;
  }
  const eventDescription = vevent.getFirstPropertyValue('description');
  output += eventDescription ? `üìå ${serializeMarkdownV2(eventDescription)}\n` : 'üìå –ó–∞–º–µ—Ç–∫–∏: \\-\n';
  output += '\n–í–∞—à–µ —Å–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ\\!\n';
  // output += '–í—ã –ø–æ–ª—É—á–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ 10 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞.';

  return output.trim();
};

module.exports.generateCalendar = async ({ id, activity, jwt, language }) => {
  const { result, error } = await requestJsonRpc2({
    url: GIC_RPC,
    body: {
      id: id,
      method: 'generate-calendar',
      params: activity,
    },
    jwt: jwt,
    headers: {
      'Accept': 'text/calendar',
      'Accept-Language': language,
    },
  });
  if (error) {
    throw new Error(error.message);
  }
  if (!result) {
    throw new Error('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è. –î–∞—Ç—ã –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω—ã.');
  }
  const { data, type } = result;
  if (type !== 'text/calendar') {
    throw new Error(data);
  }
  return data;
};
